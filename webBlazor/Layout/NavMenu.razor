@inject NavigationManager NavigationManager
@inject AuthenticationStateService AuthStateService
@inject FirebaseAuthService FirebaseAuthService
@inject SweetAlertService SweetAlert

<nav class="navbar">
    <div class="navbar-container">
        <a href="" class="navbar-brand">
            <i class="fas fa-book-open me-2"></i>
            Ágora
        </a>

        <div class="navbar-right">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <i class="fas fa-home me-2"></i> Inicio
            </NavLink>

            @if (AuthStateService.IsAuthenticated)
            {
                <button @onclick="HandleLogout" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Cerrar sesión</span>
                </button>
            }
        </div>
    </div>
</nav>

@code {
    protected override void OnInitialized()
    {
        // Forzar actualización cuando cambie el estado de autenticación
        AuthStateService.OnAuthenticationStateChanged += StateHasChanged;
    }

    private async Task HandleLogout()
    {
        try
        {
            await FirebaseAuthService.SignOut();
            AuthStateService.SetAuthenticationState(false);
            await SweetAlert.FireAsync("¡Hasta pronto!", "Has cerrado sesión correctamente.", SweetAlertIcon.Success);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception)
        {
            await SweetAlert.FireAsync("Error", "No se pudo cerrar la sesión.", SweetAlertIcon.Error);
        }
    }

    public void Dispose()
    {
        // Limpieza del evento cuando se destruye el componente
        AuthStateService.OnAuthenticationStateChanged -= StateHasChanged;
    }
}