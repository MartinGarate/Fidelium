@page "/login"
@inject FirebaseAuthService _firebaseAuthService
@inject AuthenticationStateService authStateService
@inject SweetAlertService sweetAlert
@inject NavigationManager navigationManager
@inject ILogger<Login> logger

<div class="auth-container">
    <div class="auth-card">
        <div class="card-header">
            <h2 class="text-gradient mb-0">¡Hola de Nuevo!</h2>
        </div>
        <div class="card-body">
            <p class="card-subtitle mb-4">Por favor, inicia sesión para continuar en Fidelium...</p>
            <form class="auth-form" @onsubmit:preventDefault @onsubmit="Loguear">
                <div class="form-group mb-4">
                    <label class="form-label">Correo electrónico</label>
                    <div class="input-group">
                        <i class="fas fa-envelope input-icon"></i>
                        <input type="email" class="form-control" @bind="email" placeholder="usuario@gmail.com" required />
                    </div>
                </div>
                <div class="form-group mb-4">
                    <label class="form-label">Contraseña</label>
                    <div class="input-group">
                        <i class="fas fa-lock input-icon"></i>
                        <input type="password" class="form-control" @bind="password" placeholder="••••••••" required />
                    </div>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Iniciando sesión...</span>
                        }
                        else
                        {
                            <i class="fas fa-sign-in-alt me-2"></i>
                            <span>Acceder</span>
                        }
                    </button>
                    <button type="button" class="btn btn-secondary w-100" @onclick="RegisterMe" disabled="@isLoading">
                        <i class="fas fa-user-plus me-2"></i>
                        Registrarme
                    </button>
                </div>
            </form>
        </div>
        <div class="card-footer text-center">
            <span class="text-muted">Martín Gárate | T.S.D.S 2025</span>
        </div>
    </div>
</div>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private bool isLoading = false;
    bool isAuthenticated = false;
    protected override void OnInitialized()
    {
        // Si ya está autenticado, redirigir al home
        if (authStateService.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }
    }

    private async Task Loguear()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            await sweetAlert.FireAsync("Error", "Por favor, completa todos los campos.", SweetAlertIcon.Error);
            return;
        }

        try
        {
            isLoading = true;
            var user = await _firebaseAuthService.SignInWithEmailPassword(email, password);

            if (user != null)
            {
                if (user.EmailVerified == false)
                {
                    await sweetAlert.FireAsync("Error de autenticación", "Por favor, verifica tu correo electrónico antes de iniciar sesión.", SweetAlertIcon.Warning);
                    return;
                }
                isAuthenticated = true;
                StateHasChanged(); // Fuerza la actualización de la interfaz de usuario después de iniciar sesión (Blazor)
            
                // Actualizar el estado de autenticación global
                authStateService.SetAuthenticationState(true);

                // Mostrar mensaje de éxito
                await sweetAlert.FireAsync("¡Bienvenido!", "Has iniciado sesión correctamente.", SweetAlertIcon.Success);

                // Redirigir al home
                navigationManager.NavigateTo("/");
            }
            else
            {
                await sweetAlert.FireAsync("Error", "Credenciales incorrectas.", SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error durante el inicio de sesión");
            await sweetAlert.FireAsync("Error", "Ocurrió un error al iniciar sesión. Por favor, intenta de nuevo.", SweetAlertIcon.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void RegisterMe()
    {
        navigationManager.NavigateTo("/signin");
    }
}