@page "/nuevoEditarCliente"
@inject IGenericService<Cliente> _serviceCliente
@inject IGenericService<Usuario> _serviceUsuario
@inject NavigationManager NavigationManager

@if (cliente == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <h3>@tituloPagina</h3>
    <EditForm Model="cliente" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="container">
            <div class="col-md-5">

                <div class="form-group">
                    <label class="form-label">DNI:</label>
                    <InputNumber class="form-text mb-2" @bind-Value="cliente.Usuario.DNI" />
                </div>

                <div class="form-group">
                    <label class="form-label">Email:</label>
                    <InputText class="form-text mb-2" @bind-Value="cliente.Usuario.Email" />
                </div>

                <div class="form-group">
                    <label class="form-label">Nombre:</label>
                    <InputText class="form-text mb-2" @bind-Value="cliente.Usuario.Nombre" />
                </div>

                <div class="form-group">
                    <label class="form-label">Nombre:</label>
                    <InputText class="form-text mb-2" @bind-Value="cliente.Instagram" />
                </div>

                <div class="form-group">
                    <label class="form-label">Nombre:</label>
                    <InputText class="form-text mb-2" @bind-Value="cliente.Telefono" />
                </div>

    <ValidationSummary />
                <button class="btn btn-primary" type="submit">@guardarButtonText</button>
                <button class="btn btn-danger" @onclick="Cancelar">Cancelar</button>
            </div>
        </div>
    </EditForm>

}
@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public int? idCliente { get; set; }
    [SupplyParameterFromQuery]
    [Parameter]
    public int? idUsuario { get; set; }

    private Cliente cliente;
    private Usuario usuario;


    private bool isEditing => idCliente != null && idUsuario != null; 
    private string guardarButtonText => isEditing ? "Actualizar" : "Agregar";
    private string tituloPagina => isEditing ? "Editando Cliente" : "Agregando nuevo Cliente";

    protected override async Task OnInitializedAsync()
    {
        if (idCliente != null)
        {
            cliente = await _serviceCliente.GetByIdAsync((int)idCliente);
            if (cliente.Usuario == null)
                cliente.Usuario = new Usuario();
        }
        else
        {
            cliente = new Cliente
            {
                Usuario = new Usuario()
            };
        }
    }

    private async Task Guardar()
    {
        if (idCliente != null && idUsuario != null)
        {
            await _serviceUsuario.UpdateAsync(cliente.Usuario);
            await _serviceCliente.UpdateAsync(cliente);
        }
        else
        {
            var usuarioCreado = await _serviceUsuario.AddAsync(cliente.Usuario);
            if (usuarioCreado != null)
            {
                cliente.UsuarioID = usuarioCreado.ID;
                await _serviceCliente.AddAsync(cliente);
            }
            else
            {
                return;
            }
        }
        NavigationManager.NavigateTo("clientes");
    }

    private async Task Cancelar()
    {
        NavigationManager.NavigateTo($"clientes");
    }

}
