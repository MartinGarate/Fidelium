@page "/clientes"
@inject IGenericService<Cliente> _serviceCliente
@inject IGenericService<Usuario> _serviceUsuario
@inject SweetAlertService sweetAlert
@inject FirebaseAuthService FirebaseAuthService // Servicio para verificar autenticación
@inject NavigationManager NavigationManager     // Servicio para redirigir

<PageTitle>Clientes</PageTitle>

<div class="page-container">
    <div class="page-header">
        <h1>
            <i class="fas fa-users me-2"></i>
            Clientes
        </h1>
    </div>

    @if (clientes == null)
    {
        <div class="loading-state">
            <div class="spinner"></div>
            <p><em>Cargando los clientes...</em></p>
        </div>
    }
    else if (!clientes.Any())
    {
        <div class="empty-state">
            <i class="fas fa-users-slash mb-3"></i>
            <p><em>No hay clientes disponibles.</em></p>
        </div>
    }
    else
    {
        <NavLink class="btn btn-primary" href=@("NuevoEditarCliente")>
            Agregar Capacitación
        </NavLink>
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                       
                        <th>
                            <i class="fas fa-user me-2"></i>
                            Nombre
                        </th>
                        
                        <th>
                            <i class="fas fa-envelope me-2"></i>
                            Email
                        </th>
                        
                        <th>
                            <i class="fas fa-id-card me-2"></i>
                            DNI
                        </th>
                       
                        <th>
                            <i class="fas fa-user-tag me-2"></i>
                            Tipo de Usuario
                        </th>
                       
                        <th>
                            <i class="fab fa-instagram me-2"></i>
                            Instagram
                        </th>
                       
                        <th>
                            <i class="fas fa-phone me-2"></i>
                            Teléfono
                        </th>

                        <th>
                            <i class="fas fa-user me-2"></i>
                            Acciones
                        </th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var cli in clientes)
                    {
                        <tr>
                            
                            <td>@cli?.Usuario?.Nombre</td>
                            
                            <td>
                                <a href="mailto:@cli?.Usuario?.Email">@cli?.Usuario?.Email</a>
                            </td>
                            
                            <td>@cli?.Usuario?.DNI</td>
                            
                            <td>
                                <span class="badge">@cli?.Usuario?.TipoUsuario</span>
                            </td>
                            
                            <td>
                                @if (!string.IsNullOrEmpty(cli?.Instagram))
                                {
                                    <a href="https://instagram.com/@cli.Instagram" target="_blank">
                                        @cli.Instagram
                                    </a>
                                }
                            </td>
                            
                            <td>
                                @if (!string.IsNullOrEmpty(cli?.Telefono))
                                {
                                    <a href="tel:@cli.Telefono">@cli.Telefono</a>
                                }
                            </td>
                        

                            <td>
                                <a class="btn btn-sm
                                    btn-primary me-2"
                                   href="@($"/nuevoeditarcliente?idCliente={cli.ID}&idUsuario={cli.UsuarioID}")">
                                    <i class="fas fa-edit"></i> Editar
                                </a>

                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteCliente(cli)">
                                    <i class="fas fa-trash-alt"></i> Eliminar
                                </button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Cliente>? clientes;
    private List<Usuario>? usuarios;

    private async Task DeleteCliente(Cliente cliente)
    {
        var respuesta = await sweetAlert.FireAsync(new SweetAlertOptions
        {
            Title = "¿Estás seguro?",
            Text = $"¿Deseas eliminar a '{cliente.Usuario?.Nombre ?? "Sin nombre"}'?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí, eliminar",
            CancelButtonText = "Cancelar"
        });
        if (respuesta.IsConfirmed)
        {
            if (await _serviceCliente.DeleteAsync(cliente.ID))
            {
                clientes?.Remove(cliente);
                StateHasChanged();
            }
            else
            {
                await sweetAlert.FireAsync("Error", "No se pudo eliminar al cliente.", SweetAlertIcon.Error);
            }
        }
    }

    // Al inicializar la página, verifica si el usuario está autenticado
    protected override async Task OnInitializedAsync()
    {
        // Consulta si el usuario está autenticado
        var isAuthenticated = await FirebaseAuthService.IsUserAuthenticated();

        // Si NO está autenticado, lo redirige a la página de login
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return; // Evita cargar datos si no está logueado
        }

        // Si está autenticado, carga los datos normalmente
        clientes = (await _serviceCliente.GetAllAsync(null))?.ToList();
        usuarios = (await _serviceUsuario.GetAllAsync(null))?.ToList();
    }


}
